<?xml version="1.0" encoding="UTF-8"?>
<!--configuration属性解释:
    scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- 变量说明：
        原生是property标签，有两个属性：name和value 使用变量：${name}
        springProperty标签替代原生property，可以读取spring配置文件，但是要以logback-spring.xml命名
    -->
    <springProperty scope="context" name="log_name" source="spring.application.name" />
    <springProperty scope="context" name="log_path" source="logging.path" />

    <!-- 用来设置某一个包或者具体的某一个类的日志打印级别以及指定appender，属性：
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别（TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF），还有一个值INHERITED或者同义词NULL，代表强制执行上级的级别。如果没有设置此属性，那么当前logger将会继承上级的级别。
        addtivity:用来描述是否向上级logger传递打印信息。默认是true。
    -->
    <!--<logger>-->
    <!--</logger>-->
    <!-- 控制台打印日志的相关配置 -->
    <appender name="STD-OUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 日志格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%level] [%thread] %logger{36} - %m%n</pattern>
        </encoder>
        <!-- 日志级别过滤器，执行一个过滤器会有返回DENY，NEUTRAL，ACCEPT三个枚举值中的一个：
            DENY：日志将立即被抛弃不再经过其他过滤器
            NEUTRAL：有序列表里的下个过滤器过接着处理日志
            ACCEPT：日志会被立即处理，不再经过剩余过滤器
        -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别：DEBUG以及以上都接收 -->
            <level>DEBUG</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>NEUTRAL</onMismatch>
        </filter>
    </appender>

    <!-- 文件保存日志的相关配置 - ERROR级别专用 -->
    <appender name="ERROR-OUT" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 保存日志文件的路径 -->
        <file>${log_path}/${log_name}/error.log</file>
        <!-- 日志格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%level] [%thread] %logger{36} - %m%n</pattern>
        </encoder>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 循环政策：基于时间创建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件名格式 -->
            <fileNamePattern>${log_path}/${log_name}/error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 最大保存时间：90天-->
            <maxHistory>90</maxHistory>
        </rollingPolicy>
    </appender>
    <!-- 记录info及以上的日志 -->
    <appender name="INFO-OUT" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 保存日志文件的路径 -->
        <file>${log_path}/${log_name}/info.log</file>
        <!-- 日志格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%level] [%thread] %logger{36} - %m%n</pattern>
        </encoder>
        <!-- 日志级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>NEUTRAL</onMismatch>
        </filter>
        <!-- 循环政策：基于时间创建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件名格式 -->
            <fileNamePattern>${log_path}/${log_name}/info.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 最大保存时间：30天-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- 根logger，也是一种logger，且只有一个level属性 -->
    <root level="info">
        <appender-ref ref="STD-OUT" />
        <appender-ref ref="INFO-OUT" />
        <appender-ref ref="ERROR-OUT" />
    </root>
</configuration>